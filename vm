#! /usr/bin/env python

import time
import logging
import argparse
import subprocess

def run(cmd, capture=False):
  if isinstance(cmd, basestring):
    cmd = cmd.split()
  log.debug(cmd)
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None)
  (stdout, stderr) = p.communicate()
  rc = p.wait()
  log.log(logging.ERROR if rc != 0 else logging.DEBUG, '{cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='vagrant/virtualbox frontend')

group = parser.add_mutually_exclusive_group(required=True)
group.add_argument('--up', '--start', dest='up', action='store_true', help='Bring (resume) up VM')
group.add_argument('--reload', '--fix', dest='reload', action='store_true', help='Reload VM that doesn\'t want to start')
group.add_argument('--down', '--stop', dest='down', action='store_true', help='Bring (suspend) down VM')
group.add_argument('--check', '--status', '--ping', dest='check', action='store_true', help='Ping the VMs through Ansible')

parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.INFO)

rc = -1

if args.up or args.check or args.reload:
  (rc, stdout, stderr) = run('which ansible', capture=True)
  if (rc != 0) or stderr:
    parser.error('Please source `ansible_setup` to enable ansible commands')

if args.up or args.down or args.reload:
  done = False
  while not done:
    done = True
    (rc, stdout, stderr) = run([
      'vagrant',
      'resume' if args.up else ('reload' if args.reload else 'suspend')
    ])
    if rc != 0:
      if args.up:
        log.info('`vagrant up` failed, trying `vagrant reload`')
        done = False
        args.up = False
        args.reload = True
      else:
        exit(rc)

if args.up or args.reload:
  log.info('Waiting for VMs to spin up before pinging them')
  time.sleep(10) 

if args.up or args.check or args.reload:
  (rc, stdout, stderr) = run(['ansible', 'all', '-m', 'ping'])

exit(rc)
